"use strict";var ApplicationConfiguration=function(){var applicationModuleName="fiableo",applicationModuleVendorDependencies=["ngResource","ngCookies","ngAnimate","ngTouch","ngSanitize","ui.router","ui.bootstrap","ui.utils","pascalprecht.translate"],registerModule=function(moduleName,dependencies){angular.module(moduleName,dependencies||[]),angular.module(applicationModuleName).requires.push(moduleName)};return{applicationModuleName:applicationModuleName,applicationModuleVendorDependencies:applicationModuleVendorDependencies,registerModule:registerModule}}();angular.module(ApplicationConfiguration.applicationModuleName,ApplicationConfiguration.applicationModuleVendorDependencies),angular.module(ApplicationConfiguration.applicationModuleName).config(["$locationProvider",function($locationProvider){$locationProvider.hashPrefix("!")}]),angular.element(document).ready(function(){"#_=_"===window.location.hash&&(window.location.hash="#!"),angular.bootstrap(document,[ApplicationConfiguration.applicationModuleName])}),ApplicationConfiguration.registerModule("clients"),ApplicationConfiguration.registerModule("core"),ApplicationConfiguration.registerModule("fiableops"),ApplicationConfiguration.registerModule("users"),angular.module("clients").config(["$stateProvider",function($stateProvider){$stateProvider.state("client",{url:"/clients",templateUrl:"modules/clients/views/list-clients.client.view.html"}).state("createclient",{url:"/clients/create",templateUrl:"modules/clients/views/create-clients.client.view.html"}).state("viewclient",{url:"/clients/:clientId",templateUrl:"modules/clients/views/view-clients.client.view.html"}).state("editclient",{url:"/clients/:clientId/edit",templateUrl:"modules/clients/views/edit-clients.client.view.html"}).state("createproforma",{url:"/clients/:clientId/proforma/create",templateUrl:"modules/clients/views/create-proforma.client.view.html"}).state("proforma",{url:"/clients/:clientId/proforma",templateUrl:"modules/clients/views/list-proforma.client.view.html"}).state("viewproforma",{url:"/clients/:clientId/proforma/:proformaId",templateUrl:"modules/clients/views/view-proforma.client.view.html"}).state("createinvoice",{url:"/clients/:clientId/proforma/:proformaId/invoice/create",templateUrl:"modules/clients/views/create-invoice.client.view.html"}).state("invoices",{url:"/clients/:clientId/proforma/:proformaId/invoices",templateUrl:"modules/clients/views/list-invoice.client.view.html"}).state("viewinvoice",{url:"/clients/:clientId/proforma/:proformaId/invoice/:invoiceId",templateUrl:"modules/clients/views/view-invoice.client.view.html"}).state("createdelivery",{url:"/clients/:clientId/proforma/:proformaId/delivery/create",templateUrl:"modules/clients/views/create-delivery.client.view.html"}).state("deliveries",{url:"/clients/:clientId/proforma/:proformaId/deliveries",templateUrl:"modules/clients/views/list-delivery.client.view.html"}).state("viewdelivery",{url:"/clients/:clientId/proforma/:proformaId/delivery/:deliveryId",templateUrl:"modules/clients/views/view-delivery.client.view.html"})}]),angular.module("clients").controller("ClientsController",["$scope","$stateParams","$location","Authentication","Clients",function($scope,$stateParams,$location,Authentication,Clients){$scope.authentication=Authentication,$scope.client="",$scope.toggle=!0,$scope.create=function(){var clients=new Clients({name:this.client.name,address:this.client.address,location:this.client.location});clients.$save(function(response){$location.path("clients/"+response._id),$scope.client=""},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.remove=function(clients){if(clients){clients.$remove();for(var i in $scope.clients)$scope.clients[i]===clients&&$scope.clients.splice(i,1)}else $scope.clients.$remove(function(){$location.path("clients")})},$scope.update=function(){var clients=$scope.clients;clients.$update(function(){$location.path("clients/"+clients._id)},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.find=function(){$scope.clients=Clients.query()},$scope.findOne=function(){$scope.clients=Clients.get({clientId:$stateParams.clientId})},$scope.toggler=function(){$scope.toggle=!1,$scope.btnToggler=!0}}]),angular.module("clients").controller("InvoiceController",["$scope","$stateParams","$location","Authentication","Clients","Proforma","Invoice","Delivery",function($scope,$stateParams,$location,Authentication,Clients,Proforma,Invoice,Delivery){$scope.authentication=Authentication,$scope.totalPrices=[],$scope.toggle=!0;$stateParams.clientId,$stateParams.invoiceId;$scope.addRow=function(){$scope.unitTotal=$scope.unitPrice*$scope.qtes,$scope.totalPrices.push($scope.unitTotal),console.log($scope.totalPrices),$scope.receipts.push({description:$scope.description,qtes:$scope.qtes,unitPrice:$scope.unitPrice,unitTotal:$scope.unitTotal}),console.log("receipts",$scope.receipts),$scope.description="",$scope.qtes="",$scope.unitPrice="",$scope.calcTotal()},$scope.calcTotal=function(){$scope.total=0;var totals=$scope.totalPrices;console.log("bagg",totals),angular.forEach(totals,function(total,key){$scope.total+=totals[key]})},$scope.editable=function(){$scope.receipts=[]},$scope.createDelivery=function(){var delivery=new Delivery($scope.delivery);console.log("delivery",delivery),delivery.$save({clientId:$stateParams.clientId,proformaId:$stateParams.proformaId},function(){$location.path("clients/"+$stateParams.clientId+"/proforma/"+$stateParams.proformaId+"/delivery"),$scope.delivery=""},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.create=function(){var invoice=new Invoice($scope.invoice);console.log("invoice",invoice),invoice.$save({clientId:$stateParams.clientId,proformaId:$stateParams.proformaId},function(){$location.path("clients/"+$stateParams.clientId+"/proforma/"+$stateParams.proformaId+"/invoice"),$scope.invoice=""},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.remove=function(invoice){if(invoice){invoice.$remove();for(var i in $scope.invoice)$scope.invoice[i]===invoice&&$scope.invoice.splice(i,1)}else $scope.invoice.$remove(function(){})},$scope.update=function(){var invoice=$scope.invoice;invoice.$update(function(){},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.find=function(){$scope.invoices=Invoice.query({clientId:$stateParams.clientId,proformaId:$stateParams.proformaId}),console.log("invoice",$scope.invoices)},$scope.findDelivery=function(){$scope.deliveries=Delivery.query({clientId:$stateParams.clientId,proformaId:$stateParams.proformaId}),console.log("deliveries",$scope.deliveries)},$scope.findOne=function(){$scope.proforma=Proforma.get({clientId:$stateParams.clientId,proformaId:$stateParams.proformaId}),console.log("proforma",$scope.proforma),$scope.invoices=Invoice.query({clientId:$stateParams.clientId,proformaId:$stateParams.proformaId,invoiceId:$stateParams.invoiceId}),console.log("invoice",$scope.invoices)},$scope.findOneDelivery=function(){$scope.client=Clients.get({clientId:$stateParams.clientId}),console.log("client",$scope.client),$scope.proforma=Proforma.get({clientId:$stateParams.clientId,proformaId:$stateParams.proformaId}),console.log("proforma",$scope.proforma),$scope.delivery=Delivery.query({clientId:$stateParams.clientId,proformaId:$stateParams.proformaId,deliveryId:$stateParams.deliveryId}),console.log("delivery",$scope.delivery)},$scope.toggler=function(){$scope.toggle=!1,$scope.btnToggler=!0}}]),angular.module("clients").controller("ProformaController",["$scope","$stateParams","$location","Authentication","Clients","Proforma",function($scope,$stateParams,$location,Authentication,Clients,Proforma){$scope.authentication=Authentication,$scope.totalPrices=[],$scope.toggle=!0,$scope.addRow=function(){$scope.unitTotal=0,$scope.unitTotal=$scope.unitPrice*$scope.qtes,$scope.totalPrices.push($scope.unitTotal),console.log($scope.totalPrices),$scope.quotations.push({description:$scope.description,qtes:$scope.qtes,unitPrice:$scope.unitPrice,unitTotal:$scope.unitTotal}),console.log("quotations",$scope.quotations),$scope.description="",$scope.qtes="",$scope.unitPrice="",$scope.calcTotal()},$scope.calcTotal=function(){$scope.total=0;var totals=$scope.totalPrices;console.log("bagg",totals),angular.forEach(totals,function(total,key){$scope.total+=totals[key]})},$scope.editable=function(){$scope.quotations=[]},$scope.create=function(){var proforma=($stateParams.clientId,new Proforma($scope.proforma));proforma.quotations=$scope.quotations,proforma.total=$scope.total,console.log("proforma",proforma),proforma.$save({clientId:$stateParams.clientId},function(response){$location.path("clients/"+$stateParams.clientId+"/proforma"),console.log(response),$scope.proforma=""},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.remove=function(proforma){if(proforma){Proforma.$remove();for(var i in $scope.Proforma)$scope.proforma[i]===proforma&&$scope.proforma.splice(i,1)}else $scope.proforma.$remove(function(){})},$scope.update=function(){$scope.proforma;Proforma.$update(function(){},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.find=function(){$scope.proforma=Proforma.query({clientId:$stateParams.clientId}),console.log("list",$scope.proforma)},$scope.findOne=function(){$scope.proforma=Proforma.get({clientId:$stateParams.clientId,proformaId:$stateParams.proformaId}),$scope.client=Clients.get({clientId:$stateParams.clientId}),console.log("item",$scope.proforma)},$scope.toggler=function(){$scope.toggle=!1,$scope.btnToggler=!0}}]),angular.module("clients").factory("Clients",["$resource",function($resource){return $resource("clients/:clientId",{clientId:"@_id"},{update:{method:"PUT"}})}]),angular.module("clients").factory("Delivery",["$resource",function($resource){return $resource("clients/:clientId/proforma/:proformaId/delivery/:deliveryId",{},{update:{method:"PUT"}})}]),angular.module("clients").factory("Invoice",["$resource",function($resource){return $resource("clients/:clientId/proforma/:proformaId/Invoice/:InvoiceId",{},{update:{method:"PUT"}})}]),angular.module("clients").factory("Proforma",["$resource",function($resource){return $resource("clients/:clientId/proforma/:proformaId",{},{update:{method:"PUT"}})}]),angular.module("core").config(["$stateProvider","$urlRouterProvider",function($stateProvider,$urlRouterProvider){$urlRouterProvider.otherwise("/"),$stateProvider.state("home",{url:"/",templateUrl:"modules/core/views/home.client.view.html"})}]),angular.module("core").controller("HeaderController",["$scope","Authentication","Menus",function($scope,Authentication,Menus){$scope.authentication=Authentication,$scope.isCollapsed=!1,$scope.menu=Menus.getMenu("topbar"),$scope.toggleCollapsibleMenu=function(){$scope.isCollapsed=!$scope.isCollapsed},$scope.$on("$stateChangeSuccess",function(){$scope.isCollapsed=!1})}]),angular.module("core").controller("HomeController",["$scope","Authentication",function($scope,Authentication){$scope.authentication=Authentication}]),angular.module("core").service("Menus",[function(){this.defaultRoles=["*"],this.menus={};var shouldRender=function(user){if(!user)return this.isPublic;if(~this.roles.indexOf("*"))return!0;for(var userRoleIndex in user.roles)for(var roleIndex in this.roles)if(this.roles[roleIndex]===user.roles[userRoleIndex])return!0;return!1};this.validateMenuExistance=function(menuId){if(menuId&&menuId.length){if(this.menus[menuId])return!0;throw new Error("Menu does not exists")}throw new Error("MenuId was not provided")},this.getMenu=function(menuId){return this.validateMenuExistance(menuId),this.menus[menuId]},this.addMenu=function(menuId,isPublic,roles){return this.menus[menuId]={isPublic:isPublic||!1,roles:roles||this.defaultRoles,items:[],shouldRender:shouldRender},this.menus[menuId]},this.removeMenu=function(menuId){this.validateMenuExistance(menuId),delete this.menus[menuId]},this.addMenuItem=function(menuId,menuItemTitle,menuItemURL,menuItemType,menuItemUIRoute,isPublic,roles,position){return this.validateMenuExistance(menuId),this.menus[menuId].items.push({title:menuItemTitle,link:menuItemURL,menuItemType:menuItemType||"item",menuItemClass:menuItemType,uiRoute:menuItemUIRoute||"/"+menuItemURL,isPublic:null===isPublic||"undefined"==typeof isPublic?this.menus[menuId].isPublic:isPublic,roles:null===roles||"undefined"==typeof roles?this.menus[menuId].roles:roles,position:position||0,items:[],shouldRender:shouldRender}),this.menus[menuId]},this.addSubMenuItem=function(menuId,rootMenuItemURL,menuItemTitle,menuItemURL,menuItemUIRoute,isPublic,roles,position){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)this.menus[menuId].items[itemIndex].link===rootMenuItemURL&&this.menus[menuId].items[itemIndex].items.push({title:menuItemTitle,link:menuItemURL,uiRoute:menuItemUIRoute||"/"+menuItemURL,isPublic:null===isPublic||"undefined"==typeof isPublic?this.menus[menuId].items[itemIndex].isPublic:isPublic,roles:null===roles||"undefined"==typeof roles?this.menus[menuId].items[itemIndex].roles:roles,position:position||0,shouldRender:shouldRender});return this.menus[menuId]},this.removeMenuItem=function(menuId,menuItemURL){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)this.menus[menuId].items[itemIndex].link===menuItemURL&&this.menus[menuId].items.splice(itemIndex,1);return this.menus[menuId]},this.removeSubMenuItem=function(menuId,submenuItemURL){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)for(var subitemIndex in this.menus[menuId].items[itemIndex].items)this.menus[menuId].items[itemIndex].items[subitemIndex].link===submenuItemURL&&this.menus[menuId].items[itemIndex].items.splice(subitemIndex,1);return this.menus[menuId]},this.addMenu("topbar")}]),angular.module("fiableops").config(["$stateProvider",function($stateProvider){$stateProvider.state("listFiableops",{url:"/fiableops",templateUrl:"modules/fiableops/views/list-fiableops.client.view.html"}).state("createFiableop",{url:"/fiableops/create",templateUrl:"modules/fiableops/views/create-fiableop.client.view.html"}).state("viewFiableop",{url:"/fiableops/:fiableopId",templateUrl:"modules/fiableops/views/view-fiableop.client.view.html"}).state("editFiableop",{url:"/fiableops/:fiableopId/edit",templateUrl:"modules/fiableops/views/edit-fiableop.client.view.html"})}]),angular.module("fiableops").controller("FiableopsController",["$scope","$stateParams","$location","Authentication","Fiableops",function($scope,$stateParams,$location,Authentication,Fiableops){$scope.authentication=Authentication,$scope.create=function(){var fiableop=new Fiableops({name:this.name});fiableop.$save(function(response){$location.path("fiableops/"+response._id),$scope.name=""},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.remove=function(fiableop){if(fiableop){fiableop.$remove();for(var i in $scope.fiableops)$scope.fiableops[i]===fiableop&&$scope.fiableops.splice(i,1)}else $scope.fiableop.$remove(function(){$location.path("fiableops")})},$scope.update=function(){var fiableop=$scope.fiableop;fiableop.$update(function(){$location.path("fiableops/"+fiableop._id)},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.find=function(){$scope.fiableops=Fiableops.query()},$scope.findOne=function(){$scope.fiableop=Fiableops.get({fiableopId:$stateParams.fiableopId})}}]),angular.module("fiableops").factory("Fiableops",["$resource",function($resource){return $resource("fiableops/:fiableopId",{fiableopId:"@_id"},{update:{method:"PUT"}})}]),angular.module("users").config(["$httpProvider",function($httpProvider){$httpProvider.interceptors.push(["$q","$location","Authentication",function($q,$location,Authentication){return{responseError:function(rejection){switch(rejection.status){case 401:Authentication.user=null,$location.path("signin");break;case 403:}return $q.reject(rejection)}}}])}]),angular.module("users").config(["$stateProvider",function($stateProvider){$stateProvider.state("view-profile",{url:"/settings/view/profile",templateUrl:"modules/users/views/settings/user-profile.client.view.html"}).state("profile",{url:"/settings/profile",templateUrl:"modules/users/views/settings/edit-profile.client.view.html"}).state("password",{url:"/settings/password",templateUrl:"modules/users/views/settings/change-password.client.view.html"}).state("accounts",{url:"/settings/accounts",templateUrl:"modules/users/views/settings/social-accounts.client.view.html"}).state("signup",{url:"/signup",templateUrl:"modules/users/views/authentication/signup.client.view.html"}).state("signin",{url:"/signin",templateUrl:"modules/users/views/authentication/signin.client.view.html"}).state("forgot",{url:"/password/forgot",templateUrl:"modules/users/views/password/forgot-password.client.view.html"}).state("reset-invalid",{url:"/password/reset/invalid",templateUrl:"modules/users/views/password/reset-password-invalid.client.view.html"}).state("reset-success",{url:"/password/reset/success",templateUrl:"modules/users/views/password/reset-password-success.client.view.html"}).state("reset",{url:"/password/reset/:token",templateUrl:"modules/users/views/password/reset-password.client.view.html"})}]),angular.module("users").controller("AuthenticationController",["$scope","$http","$location","Authentication",function($scope,$http,$location,Authentication){$scope.authentication=Authentication,$scope.authentication.user&&$location.path("/"),$scope.signup=function(){$http.post("/auth/signup",$scope.credentials).success(function(response){$scope.authentication.user=response,$location.path("/signin")}).error(function(response){$scope.error=response.message})},$scope.signin=function(){$http.post("/auth/signin",$scope.credentials).success(function(response){$scope.authentication.user=response,$location.path("/clients/create")}).error(function(response){$scope.error=response.message})}}]),angular.module("users").controller("PasswordController",["$scope","$stateParams","$http","$location","Authentication",function($scope,$stateParams,$http,$location,Authentication){$scope.authentication=Authentication,$scope.authentication.user&&$location.path("/"),$scope.askForPasswordReset=function(){$scope.success=$scope.error=null,$http.post("/auth/forgot",$scope.credentials).success(function(response){$scope.credentials=null,$scope.success=response.message}).error(function(response){$scope.credentials=null,$scope.error=response.message})},$scope.resetUserPassword=function(){$scope.success=$scope.error=null,$http.post("/auth/reset/"+$stateParams.token,$scope.passwordDetails).success(function(response){$scope.passwordDetails=null,Authentication.user=response,$location.path("/password/reset/success")}).error(function(response){$scope.error=response.message})}}]),angular.module("users").controller("SettingsController",["$scope","$http","$location","Users","Authentication",function($scope,$http,$location,Users,Authentication){$scope.user=Authentication.user,$scope.user||$location.path("/"),$scope.hasConnectedAdditionalSocialAccounts=function(){for(var i in $scope.user.additionalProvidersData)return!0;return!1},$scope.isConnectedSocialAccount=function(provider){return $scope.user.provider===provider||$scope.user.additionalProvidersData&&$scope.user.additionalProvidersData[provider]},$scope.removeUserSocialAccount=function(provider){$scope.success=$scope.error=null,$http["delete"]("/users/accounts",{params:{provider:provider}}).success(function(response){$scope.success=!0,$scope.user=Authentication.user=response}).error(function(response){$scope.error=response.message})},$scope.updateUserProfile=function(isValid){if(isValid){$scope.success=$scope.error=null;var user=new Users($scope.user);user.$update(function(response){$scope.success=!0,Authentication.user=response},function(response){$scope.error=response.data.message})}else $scope.submitted=!0},$scope.changeUserPassword=function(){$scope.success=$scope.error=null,$http.post("/users/password",$scope.passwordDetails).success(function(){$scope.success=!0,$scope.passwordDetails=null}).error(function(response){$scope.error=response.message})}}]),angular.module("users").factory("Authentication",[function(){var _this=this;return _this._data={user:window.user},_this._data}]),angular.module("users").factory("Users",["$resource",function($resource){return $resource("users",{},{update:{method:"PUT"}})}]);